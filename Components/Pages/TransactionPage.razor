@page "/transaction"
@using MyFinanceHub.Model
@inject UserService UserService
@inject SessionUser Session
@inject NavigationManager NavigationManager

<div>
    <div>
        <p>Total Balance</p>
        <p>@total</p>
    </div>
    <div class="search-bar">
        <input type="text" @bind="searchKeyword" placeholder="Search by label..." class="search-input">
    </div>

    <div class="filters">
        <select @bind="filterTransactionType">
            <option value="">All Types</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
        </select>

        <select @bind="filterTransactionLabel">
            <option value="">All Labels</option>
            <option value="Debt">Debt</option>
            <option value="Rent">Rent</option>
            <option value="Food">Food</option>
            <option value="Drinks">Drinks</option>
            <option value="Clothes">Clothes</option>
            <option value="Gadgets">Gadgets</option>
        </select>

        <input type="date" @bind="filterStartDate" placeholder="Start Date">
        <input type="date" @bind="filterEndDate" placeholder="End Date">

        <button @onclick="ToggleSortOrder">Sort by Date</button>
    </div>

    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Type</th>
                <th>Label</th>
                <th>Date</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in GetFilteredTransactions())
            {
                <tr>
                    <td>@transaction.TransactionName</td>
                    <td>@transaction.TransactionId</td>
                    <td>@transaction.TransactionType</td>
                    <td>@transaction.TransactionLabel</td>
                    <td>@transaction.TransactionDate.ToShortDateString()</td>
                    <td>$@transaction.TransactionAmount</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    private string searchKeyword = string.Empty;
    private string filterTransactionType = string.Empty;
    private string filterTransactionLabel = string.Empty;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;
    private bool isAscendingOrder = true;

    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal total = 0;

    protected override void OnInitialized()
    {
        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            foreach (var transaction in loggedUser.Transaction)
            {
                if (transaction.TransactionType == "Credit")
                {
                    totalCredit += transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Debit")
                {
                    totalDebit += transaction.TransactionAmount;
                }
            }

            total = totalCredit - totalDebit;
        }
    }

    private IEnumerable<Transaction> GetFilteredTransactions()
    {
        var transactions = Session.UserLogin.Transaction.AsQueryable();

        // Filter by Transaction Type
        if (!string.IsNullOrEmpty(filterTransactionType))
        {
            transactions = transactions.Where(t => t.TransactionType == filterTransactionType);
        }

        // Filter by Transaction Label
        if (!string.IsNullOrEmpty(filterTransactionLabel))
        {
            transactions = transactions.Where(t => t.TransactionLabel == filterTransactionLabel);
        }

        // Filter by Date Range
        if (filterStartDate.HasValue)
        {
            transactions = transactions.Where(t => t.TransactionDate >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            transactions = transactions.Where(t => t.TransactionDate <= filterEndDate.Value);
        }

        // Search by Keyword (Label)
        if (!string.IsNullOrEmpty(searchKeyword))
        {
            transactions = transactions.Where(t => t.TransactionName.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase));
        }

        // Sort by Date
        return isAscendingOrder
            ? transactions.OrderBy(t => t.TransactionDate)
            : transactions.OrderByDescending(t => t.TransactionDate);
    }

    private void ToggleSortOrder()
    {
        // Toggle sorting order
        isAscendingOrder = !isAscendingOrder;
    }
}