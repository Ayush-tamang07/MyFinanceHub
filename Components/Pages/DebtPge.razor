@page "/debtPge"
@using MyFinanceHub.Model
@inject SessionUser Session
@inject UserService UserService
@inject NavigationManager NavigationManager

<div>
    <div class="texts">
        <div class="text-row">
            <p>Name</p>
            <input @bind="name" />
        </div>
        <div class="text-row">
            <p>Amount</p>
            <input @bind="amount" type="number" />
        </div>
        <div class="text-row">
            <p>Due Date</p>
            <input @bind="dueDate" type="date" />
        </div>
        <div class="text-row">
            <p>Source</p>
            <input @bind="source" />
        </div>
        <button @onclick="SubmitDebt">Submit</button>
    </div>

    <div>
        @if (!string.IsNullOrEmpty(message))
        {
            <p class="@((isSuccess ? "success-message" : "error-message"))" style="color:red;">@message</p>
        }
    </div>

    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Due Date</th>
                <th>Source</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in Session.UserLogin.Debt)
            {
                <tr>
                    <td>@debt.DebtName</td>
                    <td>@ConvertToSelectedCurrency(debt.DebtAmount) @Session.SelectedCurrency</td>
                    <td>@debt.DebtDate.ToShortDateString()</td>
                    <td>@debt.DueDate.ToShortDateString()</td>
                    <td>@debt.Source</td>
                    <td>@debt.Status</td>
                    <td>
                        <button @onclick="() => NavigateToClearDebt(debt.DebtId)">Clear</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private string name = "";
    private decimal amount = 0;
    private DateTime dueDate = DateTime.Now.AddMonths(1); // Default to 1 month from today
    private string source = "";
    private string message = "";
    private bool isSuccess = false;

    private Debt newDebt = new Debt();
    private Transaction newTrans = new Transaction();

    private void SubmitDebt()
    {
        if (string.IsNullOrWhiteSpace(name) || amount <= 0 || string.IsNullOrWhiteSpace(source))
        {
            message = "All fields are required, and amount must be greater than zero.";
            isSuccess = false;
            return;
        }

        var user = Session.UserLogin;

        // Adjust amount for selected currency
        var adjustedAmount = Session.SelectedCurrency == "USD" ? amount / 0.008m : amount;

        // Add new debt
        newDebt.DebtId = user.Debt.Count + 1;
        newDebt.DebtName = name;
        newDebt.DebtType = "Credit";
        newDebt.DebtTag = "Debt";
        newDebt.DebtAmount = adjustedAmount;
        newDebt.DebtDate = DateTime.Now;
        newDebt.DueDate = dueDate;
        newDebt.Source = source;
        newDebt.Status = "UnPaid";

        newTrans.TransactionId = user.Transaction.Count + 1;
        newTrans.TransactionLabel = "Debt";
        newTrans.TransactionName = name;
        newTrans.TransactionAmount = adjustedAmount;
        newTrans.TransactionType = "Credit";
        newTrans.TransactionDate = DateTime.Now;

        user.Transaction.Add(newTrans);
        user.Debt.Add(newDebt);

        // Save the updated user data
        var users = UserService.LoadUsers();
        var userIndex = users.FindIndex(u => u.UserID == user.UserID);
        if (userIndex != -1)
        {
            users[userIndex] = user;
            UserService.SaveUsers(users);
        }

        // Clear the input fields
        name = "";
        amount = 0;
        dueDate = DateTime.Now.AddMonths(1);
        source = "";

        // Reset the Debt object for the next submission
        newDebt = new Debt();

        message = "Debt successfully added!";
        isSuccess = true;
    }

    private void NavigateToClearDebt(int debtId)
    {
        NavigationManager.NavigateTo($"/cleardebt?DebtId={debtId}");
    }

    private decimal ConvertToSelectedCurrency(decimal amount)
    {
        var conversionRates = new Dictionary<string, decimal>
        {
            { "USD", 0.008m },
            { "NPR", 1m }
        };

        if (conversionRates.TryGetValue(Session.SelectedCurrency, out var rate))
        {
            return Math.Round(amount * rate, 2);
        }

        throw new InvalidOperationException("Invalid currency selected.");
    }
}
