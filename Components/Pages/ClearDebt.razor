@page "/cleardebt"
@using MyFinanceHub.Model
@inject SessionUser Session
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>Clear Debt</h3>
<div class="clear-debt-container">
    <button @onclick="NavigateBack" class="back-button">Back</button>
    <div class="texts">
        <div class="text-row">
            <p>Amount (@Session.SelectedCurrency)</p>
            <input @bind="amount" type="number" class="input-field" />
        </div>
        <button @onclick="SubmitDebt" class="submit-button">Submit</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="message">@Message</p>
}

@code {
    private int debtId;
    private decimal amount = 0;

    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal totalBalance = 0;
    private DebtClear newClear = new DebtClear();
    private Transaction newTrans = new Transaction();
    private string Message = "";

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("DebtId", out var id))
        {
            debtId = int.Parse(id);
        }

        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            foreach (var transaction in loggedUser.Transaction)
            {
                if (transaction.TransactionType == "Credit")
                {
                    totalCredit += transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Debit")
                {
                    totalDebit += transaction.TransactionAmount;
                }
            }

            totalBalance = totalCredit - totalDebit;
        }
    }

    private void SubmitDebt()
    {
        var user = Session.UserLogin;
        var debt = user.Debt.FirstOrDefault(d => d.DebtId == debtId);

        if (debt == null)
        {
            Message = "Debt not found.";
            return;
        }

        // Convert debt amount and entered amount to NPR for comparison
        var debtAmountInNPR = Session.SelectedCurrency == "USD" ? debt.DebtAmount / 0.0072m : debt.DebtAmount;
        var enteredAmountInNPR = Session.SelectedCurrency == "USD" ? amount / 0.0072m : amount;

        if (amount <= 0)
        {
            Message = "Amount must be greater than zero.";
            return;
        }

        if (enteredAmountInNPR > totalBalance)
        {
            Message = $"Insufficient balance to clear debt. Total balance: {ConvertToSelectedCurrency(totalBalance)}";
            return;
        }

        if (enteredAmountInNPR > debtAmountInNPR)
        {
            Message = "Amount exceeds the remaining debt.";
            return;
        }

        // Add new transaction to the user's Debt list
        newClear.DebtClearId = debt.DebtClear.Count + 1;
        newClear.DebtClearType = "Debit";
        newClear.DebtClearAmount = enteredAmountInNPR;
        newClear.DebtClearDate = DateTime.Now;

        debt.DebtAmount -= enteredAmountInNPR;
        debt.Status = debt.DebtAmount == 0 ? "Cleared" : "Pending";

        newTrans.TransactionId = user.Transaction.Count + 1;
        newTrans.TransactionName = "Loan Paid";
        newTrans.TransactionLabel = "Debt";
        newTrans.TransactionAmount = enteredAmountInNPR;
        newTrans.TransactionType = "Debit";
        newTrans.TransactionDate = DateTime.Now;

        user.Transaction.Add(newTrans);
        debt.DebtClear.Add(newClear);

        // Save the updated user data
        var users = UserService.LoadUsers();
        var userIndex = users.FindIndex(u => u.UserID == user.UserID);
        if (userIndex != -1)
        {
            users[userIndex] = user;
            UserService.SaveUsers(users);
        }

        // Clear the input fields
        amount = 0;
        Message = "Debt cleared successfully.";

        // Reset the DebtClear object for the next submission
        newClear = new DebtClear();
    }


    private decimal ConvertToSelectedCurrency(decimal amount)
    {
        var conversionRates = new Dictionary<string, decimal>
        {
            { "USD", 0.008m  },
            { "NPR", 1m }
        };

        if (conversionRates.TryGetValue(Session.SelectedCurrency, out var rate))
        {
            return Math.Round(amount * rate, 2);
        }

        throw new InvalidOperationException("Invalid currency selected.");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/debtPge");
    }
}
