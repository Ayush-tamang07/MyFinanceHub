@page "/dashboard"
@using MyFinanceHub.Model
@inject SessionUser Session

<div class="top-row px-4">
    <span>Dashboard</span>
</div>
<h3>Welcome, @Session.UserLogin.Username!</h3>
<div class="container">
    <div>
        <p>My Balance</p>
        <p>@ConvertToSelectedCurrency(total) @Session.SelectedCurrency</p>
    </div>

    <div>
        <p>Total Inflow</p>
        <p>@ConvertToSelectedCurrency(totalCredit) @Session.SelectedCurrency</p>
    </div>

    <div>
        <p>Total OutFlow</p>
        <p>@ConvertToSelectedCurrency(totalDebit) @Session.SelectedCurrency</p>
    </div>

    <div>
        <p>Total Debt</p>
        <p>@ConvertToSelectedCurrency(totalDebt) @Session.SelectedCurrency</p>
    </div>
    <div>
        <p>Remaining Debt</p>
        <p>@ConvertToSelectedCurrency(remainingDebt) @Session.SelectedCurrency</p>
    </div>

    <div>
        <p>Clear Debt</p>
        <p>@ConvertToSelectedCurrency(clearedDebt) @Session.SelectedCurrency</p>
    </div>
</div>

<div class="filter-section">
    <input type="date" @bind="filterStartDate" placeholder="Start Date" class="filter-input">
    <input type="date" @bind="filterEndDate" placeholder="End Date" class="filter-input">
    <button @onclick="FilterTransactions" class="filter-button">Apply Filters</button>
</div>

<div style="display:flex; justify-content:space-evenly;">
    <div>
        <!-- Top 5 Highest Transactions -->
        <div>
            <h3>Top 5 Highest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in GetTopTransactions(true))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@ConvertToSelectedCurrency(transaction.TransactionAmount) @Session.SelectedCurrency</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Top 5 Lowest Transactions -->
        <div>
            <h3>Top 5 Lowest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in GetTopTransactions(false))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@ConvertToSelectedCurrency(transaction.TransactionAmount) @Session.SelectedCurrency</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4>Pending Debt</h4>
        <table border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Status</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var debt in GetFilteredDebts())
                {
                    <tr>
                        <td>@debt.DebtName</td>
                        <td>@ConvertToSelectedCurrency(debt.DebtAmount) @Session.SelectedCurrency</td>
                        <td>@debt.DebtDate.ToShortDateString()</td>
                        <td>@debt.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal totalDebt = 0;
    private decimal remainingDebt = 0;
    private decimal clearedDebt = 0;
    private decimal total = 0;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;

    protected override void OnInitialized()
    {
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            totalCredit = loggedUser.Transaction.Where(t => t.TransactionType == "Credit").Sum(t => t.TransactionAmount);
            totalDebit = loggedUser.Transaction.Where(t => t.TransactionType == "Debit").Sum(t => t.TransactionAmount);
            totalDebt = loggedUser.Transaction.Where(t => t.TransactionLabel == "Debt" && t.TransactionType == "Credit").Sum(t => t.TransactionAmount);
            clearedDebt = loggedUser.Transaction.Where(t => t.TransactionLabel == "Debt" && t.TransactionType == "Debit").Sum(t => t.TransactionAmount);
            remainingDebt = totalDebt - clearedDebt;
            total = totalCredit - totalDebit;
        }
    }

    private IEnumerable<Transaction> GetTopTransactions(bool isHighest)
    {
        var transactions = Session.UserLogin.Transaction.AsQueryable();
        if (filterStartDate.HasValue) transactions = transactions.Where(t => t.TransactionDate >= filterStartDate.Value);
        if (filterEndDate.HasValue) transactions = transactions.Where(t => t.TransactionDate <= filterEndDate.Value);
        return isHighest ? transactions.OrderByDescending(t => t.TransactionAmount).Take(5) : transactions.OrderBy(t => t.TransactionAmount).Take(5);
    }

    private IEnumerable<Debt> GetFilteredDebts()
    {
        var debts = Session.UserLogin.Debt.AsQueryable();
        if (filterStartDate.HasValue) debts = debts.Where(d => d.DebtDate >= filterStartDate.Value);
        if (filterEndDate.HasValue) debts = debts.Where(d => d.DebtDate <= filterEndDate.Value);
        return debts.OrderBy(d => d.DebtAmount).Take(5);
    }

    private void FilterTransactions()
    {
        StateHasChanged();
    }

    private decimal ConvertToSelectedCurrency(decimal amount)
    {
        var conversionRates = new Dictionary<string, decimal>
        {
            { "USD", 0.008m  },
            { "NPR", 1m }
        };

        if (conversionRates.TryGetValue(Session.SelectedCurrency, out var rate))
        {
            return Math.Round(amount * rate, 2);
        }

        throw new InvalidOperationException("Invalid currency selected.");
    }
}
