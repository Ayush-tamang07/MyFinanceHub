@page "/dashboard"
@using MyFinanceHub.Model
@inject SessionUser Session
<div class="top-row px-4">
    <span>Dashboard</span>
</div>
<h3>Welcome, @Session.UserLogin.Username!</h3>
<div class="container">
    <div>
        <p>My Balance</p>
        <p>@total</p>
    </div>

    <div>
        <p>Total Inflow</p>
        <p>@totalCredit</p>
    </div>

    <div>
        <p>Total OutFlow</p>
        <p>@totalDebit</p>
    </div>

    <div>
        <p>Total Debt</p>
        <p>@totalDebt</p>
    </div>
    <div>
        <p>Remaining Debt</p>
        <p>@remainingDebt</p>
    </div>

    <div>
        <p>Clear Debt</p>
        <p>@clearedDebt</p>
    </div>
</div>

<div class="filter-section">
    <input type="date" @bind="filterStartDate" placeholder="Start Date" class="filter-input">
    <input type="date" @bind="filterEndDate" placeholder="End Date" class="filter-input">
    <button @onclick="FilterTransactions" class="filter-button">Apply Filters</button>
</div>

<div style="display:flex; justify-content:space-evenly;">
    <div>
        <!-- Top 5 Highest Transactions -->
        <div>
            <h3>Top 5 Highest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in GetTopTransactions(true))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@transaction.TransactionAmount</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Top 5 Lowest Transactions -->
        <div>
            <h3>Top 5 Lowest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in GetTopTransactions(false))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@transaction.TransactionAmount</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4>Pending Debt</h4>
        <table border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Status</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var debt in GetFilteredDebts())
                {
                    <tr>
                        <td>@debt.DebtName</td>
                        <td>@debt.DebtAmount</td>
                        <td>@debt.DebtDate.ToShortDateString()</td>
                        <td>@debt.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal totalDebt = 0;
    private decimal remainingDebt = 0;
    private decimal clearedDebt = 0;
    private decimal total = 0;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;

    protected override void OnInitialized()
    {
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            foreach (var transaction in loggedUser.Transaction)
            {
                if (transaction.TransactionType == "Credit")
                {
                    totalCredit += transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Debit")
                {
                    totalDebit += transaction.TransactionAmount;
                }

                if (transaction.TransactionLabel == "Debt")
                {
                    totalDebt += transaction.TransactionAmount;
                    if (transaction.TransactionType == "Debit")
                    {
                        remainingDebt += transaction.TransactionAmount;
                        clearedDebt += transaction.TransactionAmount;
                    }
                }
            }

            remainingDebt = totalDebt - clearedDebt;
            total = totalCredit - totalDebit;
        }
    }

    private IEnumerable<Transaction> GetTopTransactions(bool isHighest)
    {
        var transactions = Session.UserLogin.Transaction.AsQueryable();

        if (filterStartDate.HasValue)
        {
            transactions = transactions.Where(t => t.TransactionDate >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            transactions = transactions.Where(t => t.TransactionDate <= filterEndDate.Value);
        }

        return isHighest
            ? transactions.OrderByDescending(t => t.TransactionAmount).Take(5)
            : transactions.OrderBy(t => t.TransactionAmount).Take(5);
    }

    private IEnumerable<Debt> GetFilteredDebts()
    {
        var debts = Session.UserLogin.Debt.AsQueryable();

        if (filterStartDate.HasValue)
        {
            debts = debts.Where(d => d.DebtDate >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            debts = debts.Where(d => d.DebtDate <= filterEndDate.Value);
        }

        return debts.OrderBy(d => d.DebtAmount).Take(5);
    }

    private void FilterTransactions()
    {
        StateHasChanged();
    }
}


