@page "/dashboard"
@inject SessionUser Session
<h3>Welcome, @Session.UserLogin.Username!</h3>
<div class="container">
<div>
    <p>My Balance</p>
    <p>@total</p>
</div>

<div>
    <p>Total Inflow</p>
    <p>@totalCredit</p>
</div>

<div>
    <p>Total OutFlow</p>
    <p>@totalDebit</p>
</div>

<div>
    <p>Total Debt</p>
    <p>@totalDebt</p>
</div>
<div>
<p>Remaining  Debt</p>
<p>@remainingDebt</p>
    </div>

    <div>
        <p>Clear  Debt</p>
        <p>@clearedDebt</p>
    </div>
</div>


<div style="display:flex; justify-content:space-evenly;">
    <div>
        <!-- Top 5 Highest Transactions -->
        <div>
            <h3>Top 5 Highest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in Session.UserLogin.Transaction
                    .OrderByDescending(t => t.TransactionAmount)
                    .Take(5))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@transaction.TransactionAmount</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Top 5 Lowest Transactions -->
        <div>
            <h3>Top 5 Lowest Transactions</h3>
            <table border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in Session.UserLogin.Transaction
                    .OrderBy(t => t.TransactionAmount)
                    .Take(5))
                    {
                        <tr>
                            <td>@transaction.TransactionName</td>
                            <td>@transaction.TransactionAmount</td>
                            <td>@transaction.TransactionType</td>
                            <td>@transaction.TransactionDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4>Pending Debt</h4>
        <table border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Status</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var debt in Session.UserLogin.Debt
                .OrderBy(t => t.DebtAmount)
                .Take(5))
                {
                    <tr>
                        <td>@debt.DebtName</td>
                        <td>@debt.DebtAmount</td>
                        <td>@debt.DebtDate.ToShortDateString()</td>
                        <td>@debt.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



@* <div> *@
@*     <h3>Cash In</h3> *@
@*     <table border="1"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Name</th> *@
@*                 <th>ID</th> *@
@*                 <th>Type</th> *@
@*                 <th>Tag</th> *@
@*                 <th>Date</th> *@
@*                 <th>Amount</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var cashin in Session.UserLogin.Transaction.Where(t => t.TransactionType == "Credit")) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@cashin.TransactionName</td> *@
@*                     <td>@cashin.TransactionId</td> *@
@*                     <td>@cashin.TransactionType</td> *@
@*                     <td>@cashin.TransactionLabel</td> *@
@*                     <td>@cashin.TransactionDate.ToShortDateString()</td> *@
@*                     <td>@cashin.TransactionAmount</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* </div> *@
@* <div> *@
@*     <h3>Cash Outflow</h3> *@
@*     <table border="1"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Name</th> *@
@*                 <th>ID</th> *@
@*                 <th>Type</th> *@
@*                 <th>Tag</th> *@
@*                 <th>Date</th> *@
@*                 <th>Description</th> *@
@*                 <th>Amount</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var cashout in Session.UserLogin.Transaction.Where(t => t.TransactionType == "Debit")) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@cashout.TransactionName</td> *@
@*                     <td>@cashout.TransactionId</td> *@
@*                     <td>@cashout.TransactionType</td> *@
@*                     <td>@cashout.TransactionLabel</td> *@
@*                     <td>@cashout.TransactionDate.ToShortDateString()</td> *@
@*                     <td>@cashout.TransactionDescription</td> *@
@*                     <td>@cashout.TransactionAmount</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* </div> *@

@code {
    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal totalDebt = 0;
    private decimal remainingDebt = 0;
    private decimal clearedDebt = 0;
    private decimal total = 0;

    protected override void OnInitialized()
    {
        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            foreach (var transaction in loggedUser.Transaction)
            {
                if (transaction.TransactionType == "Credit")
                {
                    totalCredit += transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Debit")
                {
                    totalDebit += transaction.TransactionAmount;
                }

                // Only consider 'Debt' transactions for calculating debt-related values
                if (transaction.TransactionLabel == "Debt")
                {
                    totalDebt += transaction.TransactionAmount;
                    if (transaction.TransactionType == "Debit")
                    {
                        // Add only debit transactions related to 'Debt' for remaining debt calculation
                        remainingDebt += transaction.TransactionAmount;

                        // Track cleared debt as the sum of 'Debit' transactions related to 'Debt'
                        clearedDebt += transaction.TransactionAmount;
                    }
                }
            }

            // Remaining debt is total debt minus any debit payments made toward it
            remainingDebt = totalDebt - clearedDebt;

            // Total balance calculation (credit - debit)
            total = totalCredit - totalDebit;
        }
    }
}


