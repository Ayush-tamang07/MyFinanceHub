@page "/outflow"
@using MyFinanceHub.Model
@inject SessionUser Session
@inject UserService UserService

<div>
    <div class="texts">
        <div class="text-row">
            <p>Name</p>
            <input @bind="name" />
        </div>
        <div class="text-row">
            <p>Tag</p>
            <select @bind="Tag" @bind:event="onchange">
                <option value="">-- Select Tag --</option>
                <option value="Debt">Debt</option>
                <option value="Rent">Rent</option>
                <option value="Food">Food</option>
                <option value="Drinks">Drinks</option>
                <option value="Clothes">Clothes</option>
                <option value="Gadgets">Gadgets</option>
                <option value="Miscellaneous">Miscellaneous</option>
                <option value="Fuel">Fuel</option>
                <option value="EMI">EMI</option>
                <option value="Party">Party</option>
                <option value="CustomTag">Custom Tag</option>
            </select>
        </div>

        <!-- Custom Tag Input -->
        @if (isCustomTag)
        {
            <div class="text-row">
                <p>Custom Tag</p>
                <input @bind="customTag" placeholder="Enter custom tag" />
            </div>
        }

        <div class="text-row">
            <p>Amount</p>
            <input @bind="amount" type="number" />
        </div>
        <div class="text-row">
            <p>Description</p>
            <input @bind="description" />
        </div>
        <button @onclick="SubmitCashOut">Submit</button>
    </div>

    <div>
        @if (!string.IsNullOrEmpty(message))
        {
            <p class="@((isSuccess ? "success-message" : "error-message"))" style="color:red;">@message</p>
        }
    </div>

    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Type</th>
                <th>Tag</th>
                <th>Date</th>
                <th>Description</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cashout in Session.UserLogin.Transaction.Where(t => t.TransactionType == "Debit"))
            {
                <tr>
                    <td>@cashout.TransactionName</td>
                    <td>@cashout.TransactionId</td>
                    <td>@cashout.TransactionType</td>
                    <td>@cashout.TransactionLabel</td>
                    <td>@cashout.TransactionDate.ToShortDateString()</td>
                    <td>@cashout.TransactionDescription</td>
                    <td>@cashout.TransactionAmount</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    private decimal totalCredit = 0;
    private decimal totalDebit = 0;
    private decimal total = 0;
    private string name = "";
    private string tag = "";
    private string customTag = "";
    private decimal amount = 0;
    private string description = "";
    private string message = ""; // For displaying success or error message
    private bool isSuccess = false; // To track the success of the operation
    private bool isCustomTag = false;

    private string Tag
    {
        get => tag;
        set
        {
            tag = value;
            isCustomTag = tag == "CustomTag";
        }
    }

    private void SubmitCashOut()
    {
        if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(tag) || (isCustomTag && string.IsNullOrWhiteSpace(customTag)) || amount <= 0 || string.IsNullOrWhiteSpace(description))
        {
            message = "All fields are required, and amount must be greater than zero.";
            isSuccess = false;
            return;
        }

        var user = Session.UserLogin;

        // Use custom tag if "CustomTag" is selected, otherwise use the dropdown value
        var selectedTag = isCustomTag ? customTag : tag;

        // Check if total balance is greater than or equal to the amount
        if (total >= amount)
        {
            // Add new transaction to the user's CashOut list
            var newCashOut = new CashOut
                {
                    CashOutId = user.CashOut.Count + 1,
                    CashOutName = name,
                    CashOutType = "Debit",
                    CashOutLabel = selectedTag,
                    CashOutAmount = amount,
                    CashOutDate = DateTime.Now,
                    CashOutDescription = description
                };

            var newTrans = new Transaction
                {
                    TransactionId = user.Transaction.Count + 1,
                    TransactionLabel = selectedTag,
                    TransactionName = name,
                    TransactionAmount = amount,
                    TransactionDescription = description,
                    TransactionType = "Debit",
                    TransactionDate = DateTime.Now
                };

            user.Transaction.Add(newTrans);
            user.CashOut.Add(newCashOut);

            // Update the user's balance
            totalDebit += amount;
            total = totalCredit - totalDebit;

            // Save the updated user data
            var users = UserService.LoadUsers();
            var userIndex = users.FindIndex(u => u.UserID == user.UserID);
            if (userIndex != -1)
            {
                users[userIndex] = user;
                UserService.SaveUsers(users);
            }

            // Clear the input fields
            name = "";
            tag = "";
            customTag = "";
            amount = 0;
            description = "";
            isCustomTag = false;

            message = "Transaction successful!";
            isSuccess = true;
        }
        else
        {
            // If balance is insufficient, display an error message
            message = "You don't have enough balance to complete this transaction.";
            isSuccess = false;
        }
    }

    protected override void OnInitialized()
    {
        var loggedUser = Session.UserLogin;

        if (loggedUser?.Transaction != null)
        {
            foreach (var transaction in loggedUser.Transaction)
            {
                if (transaction.TransactionType == "Credit")
                {
                    totalCredit += transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Debit")
                {
                    totalDebit += transaction.TransactionAmount;
                }
            }

            // Total balance calculation (credit - debit)
            total = totalCredit - totalDebit;
        }
    }
}
